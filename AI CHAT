window.initAIChat = function() {
  // Load or initialize session data
  const sessKey = 'aiChatSession';
  let sess = JSON.parse(localStorage.getItem(sessKey) || '{}');
  if (!sess.userPersona) sess.userPersona = 'You';
  if (!sess.aiPersona) sess.aiPersona = 'Helpful Assistant';
  if (!Array.isArray(sess.history)) sess.history = [];

  // Create container
  const C = document.createElement('div');
  Object.assign(C.style, {
    position: 'fixed', bottom: '10px', right: '10px',
    width: '350px', background: '#fff', border: '1px solid #888',
    borderRadius: '6px', boxShadow: '0 2px 8px rgba(0,0,0,0.2)',
    fontFamily: 'sans-serif', zIndex: 999999, padding: '8px'
  });

  // Header + close
  C.innerHTML = `
    <div style="display:flex;justify-content:space-between; align-items:center; margin-bottom:6px;">
      <strong>AI Chat</strong><button id="aiClose" style="border:none;background:none;font-size:16px;cursor:pointer;">×</button>
    </div>
    <div style="margin-bottom:6px;">
      <input id="userPersona" placeholder="Your persona" style="width:48%;margin-right:4%;"/>
      <input id="aiPersona" placeholder="AI persona" style="width:48%;"/>
    </div>
    <div id="aiLog" style="height:220px;overflow:auto;padding:4px;border:1px solid #ddd;background:#fafafa;margin-bottom:6px;"></div>
    <textarea id="aiInput" rows="2" style="width:100%;box-sizing:border-box;" placeholder="Type your message…"></textarea>
    <button id="aiSend" style="width:100%;margin-top:4px;">Send</button>
  `;
  document.body.appendChild(C);

  // Elements
  const closeBtn = C.querySelector('#aiClose');
  const userInput = C.querySelector('#aiInput');
  const userPersonaInput = C.querySelector('#userPersona');
  const aiPersonaInput = C.querySelector('#aiPersona');
  const logDiv = C.querySelector('#aiLog');
  const sendBtn = C.querySelector('#aiSend');

  // Populate persona inputs
  userPersonaInput.value = sess.userPersona;
  aiPersonaInput.value = sess.aiPersona;

  // Close handler
  closeBtn.onclick = () => C.remove();

  // Save persona changes
  userPersonaInput.onchange = () => {
    sess.userPersona = userPersonaInput.value.trim() || 'You';
    saveSession();
  };
  aiPersonaInput.onchange = () => {
    sess.aiPersona = aiPersonaInput.value.trim() || 'Helpful Assistant';
    saveSession();
  };

  // Render chat history
  function renderLog() {
    logDiv.innerHTML = '';
    sess.history.forEach(({sender, text}) => {
      const line = document.createElement('div');
      line.innerHTML = `<strong>${sender}:</strong> ${text}`;
      logDiv.appendChild(line);
    });
    logDiv.scrollTop = logDiv.scrollHeight;
  }

  // Save to localStorage
  function saveSession() {
    localStorage.setItem(sessKey, JSON.stringify(sess));
  }

  // Send message handler
  sendBtn.onclick = async () => {
    const text = userInput.value.trim();
    if (!text) return;
    userInput.value = '';

    // Add user message
    sess.history.push({ sender: sess.userPersona, text });
    renderLog();
    saveSession();

    // Call your AI endpoint (example: Pollinations text API)
    try {
      const res = await fetch('https://text.pollinations.ai/' + encodeURIComponent(text) +
                              '?system=' + encodeURIComponent(sess.aiPersona));
      const aiText = await res.text();

      // Add AI message
      sess.history.push({ sender: sess.aiPersona, text: aiText });
      renderLog();
      saveSession();
    } catch (err) {
      sess.history.push({ sender: 'Error', text: err.message });
      renderLog();
      saveSession();
    }
  };

  // Draggable
  const hdr = C.firstElementChild;
  hdr.onmousedown = e => {
    e.preventDefault();
    const startX = e.clientX - C.offsetLeft;
    const startY = e.clientY - C.offsetTop;
    function onmove(ev) {
      C.style.left = (ev.clientX - startX) + 'px';
      C.style.top = (ev.clientY - startY) + 'px';
      C.style.bottom = 'auto';
      C.style.right = 'auto';
    }
    document.addEventListener('mousemove', onmove);
    document.addEventListener('mouseup', () => document.removeEventListener('mousemove', onmove), { once: true });
  };

  // Initial render
  renderLog();
};
